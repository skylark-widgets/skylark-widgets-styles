{"version":3,"sources":["ColorChooser.js"],"names":["define","colorer","Widget","styles","ColorChooser","inherit","klassName","_construct","parent","prototype","call","this","_elm","type","style","outline","borderStyle","boxSizing","textIndent","borderRadius","boxShadow","MozAppearance","webkitAppearance","appearance","color","onChange","setOnChange","onchange","setValue","r","g","b","set","setValueHex","hex","Math","floor","setValueString","getValueString","toHEXString","getValue","rgb","getValueHex"],"mappings":";;;;;;;AAAAA,QACC,8BACA,8BACA,YACC,SACDC,EACAC,EACAC,GAEA,aAEA,IAAIC,EAAeF,EAAOG,SACzBC,UAAc,eAEdC,WAAe,SAAUC,GACxBN,EAAOO,UAAUF,WAAWG,KAAKC,KAAMH,EAAQ,SAE/CG,KAAKC,KAAKC,KAAO,OACjBF,KAAKC,KAAKE,MAAMC,QAAU,OAC1BJ,KAAKC,KAAKE,MAAME,YAAc,OAC9BL,KAAKC,KAAKE,MAAMG,UAAY,aAC5BN,KAAKC,KAAKE,MAAMI,WAAa,MAC7BP,KAAKC,KAAKE,MAAMK,aAAe,MAC/BR,KAAKC,KAAKE,MAAMM,UAAY,OAC5BT,KAAKC,KAAKE,MAAMO,cAAgB,YAChCV,KAAKC,KAAKE,MAAMQ,iBAAmB,QACnCX,KAAKC,KAAKE,MAAMS,WAAa,YAQ5BZ,KAAKa,MAAQvB,EAAQU,KAAKC,MAiB3BD,KAAKc,SAAW,MASjBC,YAAc,SAASD,GACtBd,KAAKC,KAAKe,SAAWF,GAWtBG,SAAW,SAASC,EAAGC,EAAGC,GAEzBpB,KAAKa,MAAMQ,KACVH,EAAM,IAAJA,EACFC,EAAM,IAAJA,EACFC,EAAM,IAAJA,KAUJE,YAAc,SAASC,GACtBA,EAAMC,KAAKC,MAAMF,GAEjBvB,KAAKa,MAAMQ,KACVH,EAAEK,GAAO,GAAK,IACdJ,EAAEI,GAAO,EAAI,IACbH,EAAQ,IAANG,KAUJG,eAAiB,SAASb,GAEzBb,KAAKa,MAAMQ,IAAIR,IAShBc,eAAiB,SAASd,GACzB,OAAOb,KAAKa,MAAMe,eASnBC,SAAW,WACV,OAAQX,EAAGlB,KAAKa,MAAMiB,IAAI,GAAK,IAAKX,EAAGnB,KAAKa,MAAMiB,IAAI,GAAK,IAAKV,EAAGpB,KAAKa,MAAMiB,IAAI,GAAK,MASxFC,YAAc,WACb,OAAQ/B,KAAKa,MAAMiB,IAAI,IAAM,GAAK9B,KAAKa,MAAMiB,IAAI,IAAM,EAAI9B,KAAKa,MAAMiB,IAAI,IAAM,KAMlF,OAAOtC,EAAOC,aAAeA","file":"../ColorChooser.js","sourcesContent":["define([\r\n\t\"skylark-domx-colors/colorer\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./styles\"\r\n],function(\r\n\tcolorer,\r\n\tWidget,\r\n\tstyles\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ColorChooser = Widget.inherit({\r\n\t\t\"klassName\" : \"ColorChooser\",\r\n\r\n\t\t\"_construct\" : function (parent) \t{\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"input\");\r\n\r\n\t\t\tthis._elm.type = \"text\";\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.textIndent = \"4px\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\t\t\tthis._elm.style.boxShadow = \"none\";\r\n\t\t\tthis._elm.style.MozAppearance = \"textfield\";\r\n\t\t\tthis._elm.style.webkitAppearance = \"caret\";\r\n\t\t\tthis._elm.style.appearance = \"textfield\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Color chooser.\r\n\t\t\t *\r\n\t\t\t * @attribute color\r\n\t\t\t * @type {jscolor}\r\n\t\t\t */\r\n\t\t\t this.color = colorer(this._elm);\r\n\t\t\t/*\r\n\t\t\tthis.color = new jscolor(this.element);\r\n\t\t\tthis.color.backgroundColor = Editor.theme.boxColor;\r\n\t\t\tthis.color.insetColor = Editor.theme.boxColor;\r\n\t\t\tthis.color.shadow = false;\r\n\t\t\tthis.color.borderWidth = 0;\r\n\t\t\tthis.color.borderRadius = 0;\r\n\t\t\tthis.color.zIndex = 2000;\r\n\t\t\t*/\r\n\r\n\t\t\t/**\r\n\t\t\t * On change function.\r\n\t\t\t *\r\n\t\t\t * @attribute onChange\r\n\t\t\t * @type {Function}\r\n\t\t\t */\r\n\t\t\tthis.onChange = null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis._elm.onchange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setValue\r\n\t\t * @param {Number} r\r\n\t\t * @param {Number} g\r\n\t\t * @param {Number} b\r\n\t\t */\r\n\t\tsetValue : function(r, g, b) {\r\n\t\t\t//this.color.fromRGB(r * 255, g * 255, b * 255);\r\n\t\t\tthis.color.set({\r\n\t\t\t\tr:r * 255,\r\n\t\t\t\tg:g * 255,\r\n\t\t\t\tb:b * 255\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value from numeric hex.\r\n\t\t *\r\n\t\t * @method setValueHex\r\n\t\t * @param {Number} hex\r\n\t\t */\r\n\t\tsetValueHex : function(hex) {\r\n\t\t\thex = Math.floor(hex);\r\n\t\t\t//this.color.fromRGB(hex >> 16 & 255, hex >> 8 & 255, hex & 255);\r\n\t\t\tthis.color.set({\r\n\t\t\t\tr:hex >> 16 & 255,\r\n\t\t\t\tg:hex >> 8 & 255,\r\n\t\t\t\tb:hex & 255\r\n\t\t\t})\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value from CSS string.\r\n\t\t *\r\n\t\t * @method setValueString\r\n\t\t * @param {Number} color\r\n\t\t */\r\n\t\tsetValueString : function(color) {\r\n\t\t\t//this.color.fromString(color);\r\n\t\t\tthis.color.set(color);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get color value HEX as string.\r\n\t\t *\r\n\t\t * @method getValueString\r\n\t\t * @return {String} String hex color.\r\n\t\t */\r\n\t\tgetValueString : function(color) {\r\n\t\t\treturn this.color.toHEXString();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get color value object.\r\n\t\t *\r\n\t\t * @method getValue\r\n\t\t * @return {Object} Color object.\r\n\t\t */\r\n\t\tgetValue : function() {\r\n\t\t\treturn {r: this.color.rgb[0] / 255, g: this.color.rgb[1] / 255, b: this.color.rgb[2] / 255};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get color value HEX.\r\n\t\t *\r\n\t\t * @method getValueHex\r\n\t\t * @return {Number} Numeric hex color.\r\n\t\t */\r\n\t\tgetValueHex : function() {\r\n\t\t\treturn (this.color.rgb[0] << 16 ^ this.color.rgb[1] << 8 ^ this.color.rgb[2] << 0);\r\n\t\t}\r\n\r\n\t}); \r\n\r\n\r\n\treturn styles.ColorChooser = ColorChooser;\r\n});"]}