{"version":3,"sources":["skylark-widgets-styles.js"],"names":[],"mappingsfile":"../skylark-widgets-styles.js","sourcesContent":["define('skylark-widgets-styles/styles',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.styles\",{});\r\n});\ndefine('skylark-widgets-styles/colorpane.tpl',[],function(){\r\n    return (function () {\r\n        return [\r\n            \"<div class='sp-container'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\t\r\n });\ndefine('skylark-widgets-styles/ColorChooser',[\r\n\t\"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-popups\",\r\n\t\"skylark-graphics-colors/Color\",\r\n\t\"skylark-domx-colors/ColorPane\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./styles\",\r\n\t\"./colorpane.tpl\"\r\n],function(\r\n\tlangx,\r\n\t$,\r\n\teventer,\r\n\tpopups,\r\n\r\n\tColor,\r\n\tColorPane,\r\n\tWidget,\r\n\tstyles,\r\n\tcolorPaneTbl\r\n){\r\n\t\"use strict\";\r\n\r\n\tvar ColorChooser = Widget.inherit({\r\n\t\t\"klassName\" : \"ColorChooser\",\r\n\r\n\t\t\"_construct\" : function (parent) \t{\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"input\");\r\n\r\n\t\t\tthis._elm.type = \"text\";\r\n\t\t\tthis._elm.style.outline = \"none\";\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.textIndent = \"4px\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\t\t\tthis._elm.style.boxShadow = \"none\";\r\n\t\t\tthis._elm.style.MozAppearance = \"textfield\";\r\n\t\t\tthis._elm.style.webkitAppearance = \"caret\";\r\n\t\t\tthis._elm.style.appearance = \"textfield\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Color chooser.\r\n\t\t\t *\r\n\t\t\t * @attribute color\r\n\t\t\t * @type {jscolor}\r\n\t\t\t */\r\n\r\n\r\n\t\t\t var self = this;\r\n\r\n\t\t\t this.listenTo(this._velm,\"change\",function(){\r\n\t\t\t \tself._value = Color.parse(self._velm.val());\r\n\t\t\t \tself.emit(\"change\",self._value);\r\n\t\t\t });\r\n\r\n\t\t\t this.listenTo(this._picker,\"change\",function(){\r\n\t\t\t \tself._value = Color.parse(self._velm.val());\r\n\t\t\t \tself.emit(\"change\",self._value);\r\n\t\t\t });\r\n\r\n\r\n\t\t\t this.$pane = $(colorPaneTbl);\r\n\t\t\t $(\"body\").append(this.$pane);\r\n\t\t\t this._picker = ColorPane.instantiate(this.$pane[0],{\r\n                //color : opts.color\r\n\t\t\t    pane : {\r\n\t\t            states : {\r\n\t\t                showInput: false\r\n\t\t            }            \r\n\t\t        }\t\t\t\t\t \t\r\n             });\r\n\r\n            var paneIsVisible = true;\r\n            function showPane() {\r\n                if (paneIsVisible) {\r\n                    return;\r\n                }\r\n               \r\n                paneIsVisible = true;\r\n\r\n                self.$pane.show();\r\n\r\n            \tself.$pane.css(\"position\", \"absolute\");\r\n                self.$pane.offset(popups.calcOffset(self.$pane[0], self._elm));\r\n                \r\n            }\r\n\r\n            function hidePane() {\r\n                if (!paneIsVisible) {\r\n                    return;\r\n                }\r\n                paneIsVisible = false;\r\n\r\n                self.$pane.hide();\r\n            }\r\n            hidePane();\r\n\r\n            this.listenTo(this._velm,\"click touchstart\", function (e) {\r\n                if (paneIsVisible) {\r\n                    hidePane();\r\n                } else {\r\n                    showPane();\r\n                }\r\n\r\n              eventer.stop(e);\r\n            });\r\n\r\n            this.listenTo(this._picker,\"picked\",(e,color) => {\r\n            \tself._value = color;\r\n                self._velm.css(\"background-color\", color.toRgbString());   \r\n                self._velm.val(color.toHexString());     \r\n                self.emit(\"change\",color);       \r\n            });\r\n\r\n            this.listenTo(this._picker,\"canceled choosed\",(e) => {\r\n                hidePane();\r\n            });\r\n\r\n\t\t\t/*\r\n\t\t\tthis.color = new jscolor(this.element);\r\n\t\t\tthis.color.backgroundColor = Editor.theme.boxColor;\r\n\t\t\tthis.color.insetColor = Editor.theme.boxColor;\r\n\t\t\tthis.color.shadow = false;\r\n\t\t\tthis.color.borderWidth = 0;\r\n\t\t\tthis.color.borderRadius = 0;\r\n\t\t\tthis.color.zIndex = 2000;\r\n\t\t\t*/\r\n\r\n\t\t\t/**\r\n\t\t\t * On change function.\r\n\t\t\t *\r\n\t\t\t * @attribute onChange\r\n\t\t\t * @type {Function}\r\n\t\t\t */\r\n\t\t\tthis.onChange = null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onchange callback, called after changes.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange\r\n\t\t */\r\n\t\tsetOnChange : function(onChange) {\r\n\t\t\tthis.on(\"change\",this.onChange = onChange);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set value stored in the input element.\r\n\t\t *\r\n\t\t * @method setValue\r\n\t\t * @param {Number} r\r\n\t\t * @param {Number} g\r\n\t\t * @param {Number} b\r\n\t\t */\r\n\t\tsetValue : function(v) {\r\n\t\t\t//this.color.fromRGB(r * 255, g * 255, b * 255);\r\n\t\t\tthis._value = Color.parse(v);\r\n\t\t\tthis._velm.val(this._value.toHexString());\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Get color value HEX as string.\r\n\t\t *\r\n\t\t * @method getValueString\r\n\t\t * @return {String} String hex color.\r\n\t\t */\r\n\t\tgetValueString : function(color) {\r\n\t\t\treturn this._value.toHexString();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get color value object.\r\n\t\t *\r\n\t\t * @method getValue\r\n\t\t * @return {Object} Color object.\r\n\t\t */\r\n\t\tgetValue : function() {\r\n\t\t\treturn this._value;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get color value HEX.\r\n\t\t *\r\n\t\t * @method getValueHex\r\n\t\t * @return {Number} Numeric hex color.\r\n\t\t */\r\n\t\tgetValueHex : function() {\r\n\t\t\t//return this.color.get().toHex();\r\n\t\t\treturn this._value.toNumber();\r\n\t\t}\r\n\r\n\t}); \r\n\r\n\r\n\treturn styles.ColorChooser = ColorChooser;\r\n});\ndefine('skylark-widgets-styles/ColorGradientChooser',[\r\n\t\"skylark-graphics-colors/Color\",\r\n\t\"skylark-domx-colors/colorer\",\t\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./styles\"\r\n],function(\r\n\tColor,\r\n\tcolorer,\r\n\tWidget,\r\n\tstyles\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Color gradient chooser is used to select and preview a gradient of colors store in an array.\r\n\t *\r\n\t * @class ColorGradientChooser\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t */\r\n\tvar ColorGradientChooser = Widget.inherit({\r\n\t\t\"klassName\" : \"ColorGradientChooser\",\r\n\r\n\t\t\"_construct\" : function (parent){\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\t/**\r\n\t\t\t * On change callback function.\r\n\t\t\t *\r\n\t\t\t * @property onChange\r\n\t\t\t * @type {Function}\r\n\t\t\t */\r\n\t\t\tthis.onChange = null;\r\n\r\n\t\t\t/**\r\n\t\t\t * Color values of the gradient.\r\n\t\t\t *\r\n\t\t\t * @property values\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.values = [];\r\n\r\n\t\t\t/**\r\n\t\t\t * Buttons DOM element. Buttons have a onchange, color and index properties attached to them.\r\n\t\t\t *\r\n\t\t\t * @property buttons\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.buttons = [];\r\n\r\n\t\t\tthis._elm.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.style.backgroundColor = Editor.theme.panelColor;\r\n\t\t\tthis._elm.style.borderStyle = \"none\";\r\n\t\t\tthis._elm.style.boxSizing = \"border-box\";\r\n\t\t\tthis._elm.style.borderRadius = \"4px\";\r\n\t\t\tthis._elm.style.zIndex = \"2000\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Canvas DOM element used to draw the gradient.\r\n\t\t\t *\r\n\t\t\t * @property canvas\r\n\t\t\t * @type {DOM}\r\n\t\t\t */\r\n\t\t\tthis.canvas = document.createElement(\"canvas\");\r\n\t\t\tthis.canvas.style.position = \"absolute\";\r\n\t\t\tthis.canvas.style.top = \"0px\";\r\n\t\t\tthis.canvas.style.left = \"0px\";\r\n\t\t\tthis.canvas.style.width = \"100%\";\r\n\t\t\tthis.canvas.style.height = \"100%\";\r\n\t\t\tthis._elm.appendChild(this.canvas);\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Update the buttos to match new values.\r\n\t\t *\r\n\t\t * @method updateButtons\r\n\t\t */\r\n\t\tupdateButtons : function()\t{\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tfunction buttonOnChange()\r\n\t\t\t{\r\n\t\t\t\tvar rgb = this.color.rgb;\r\n\r\n\t\t\t\tself.values[this.index].setRGB(rgb[0] / 255, rgb[1] / 255, rgb[2] / 255);\r\n\t\t\t\tself.updateValues();\r\n\r\n\t\t\t\tif(self.onChange !== null)\r\n\t\t\t\t{\r\n\t\t\t\t\tself.onChange(self.values[this.index], this.index);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile(this.buttons.length > this.values.length)\r\n\t\t\t{\r\n\t\t\t\tthis._elm.removeChild(this.buttons.shift());\r\n\t\t\t}\r\n\r\n\t\t\twhile(this.buttons.length < this.values.length)\r\n\t\t\t{\r\n\t\t\t\tvar button = document.createElement(\"input\");\r\n\t\t\t\tbutton.type = \"text\";\r\n\t\t\t\tbutton.style.display = \"block\";\r\n\t\t\t\tbutton.style.position = \"absolute\";\r\n\t\t\t\tbutton.style.top = \"0px\";\r\n\t\t\t\tbutton.style.width = \"15px\";\r\n\t\t\t\tbutton.style.height = \"100%\";\r\n\t\t\t\tbutton.style.cursor = \"pointer\";\r\n\t\t\t\tbutton.style.outline = \"none\";\r\n\t\t\t\tbutton.style.borderStyle = \"none\";\r\n\t\t\t\tbutton.style.boxSizing = \"border-box\";\r\n\t\t\t\tbutton.style.borderRadius = \"2px\";\r\n\t\t\t\tthis._elm.appendChild(button);\r\n\r\n\t\t\t\tvar color = colorer(button);\r\n\t\t\t\t/*\r\n\t\t\t\tvar color = new jscolor(button);\r\n\t\t\t\tcolor.backgroundColor = Editor.theme.boxColor;\r\n\t\t\t\tcolor.insetColor = Editor.theme.boxColor;\r\n\t\t\t\tcolor.shadow = false;\r\n\t\t\t\tcolor.borderWidth = 0;\r\n\t\t\t\tcolor.borderRadius = 0;\r\n\t\t\t\tcolor.zIndex = 2000;\r\n\t\t\t\t*/\r\n\r\n\t\t\t\tbutton.onchange = buttonOnChange;\r\n\t\t\t\tbutton.color = color;\r\n\t\t\t\tbutton.index = -1;\r\n\r\n\t\t\t\tthis.buttons.push(button);\r\n\t\t\t}\r\n\r\n\t\t\tfor(var i = 0; i < this.buttons.length; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.buttons[i].index = i;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update the representation of the gradient.\r\n\t\t *\r\n\t\t * @method updateValues\r\n\t\t */\r\n\t\tupdateValues : function(){\r\n\t\t\tvar context = this.canvas.getContext(\"2d\");\r\n\t\t\tvar gradient = context.createLinearGradient(0, 0, this.canvas.width, 0);\r\n\r\n\t\t\tvar colorStep = 1 / (this.values.length - 1);\r\n\t\t\tvar colorPercentage = 0;\r\n\r\n\t\t\tvar buttonSpacing = (this.size.x - 15) / (this.buttons.length - 1);\r\n\t\t\tvar buttonPosition = 0;\r\n\r\n\t\t\tfor(var i = 0; i < this.values.length; i++)\r\n\t\t\t{\r\n\t\t\t\tgradient.addColorStop(colorPercentage, this.values[i].getStyle());\r\n\r\n\t\t\t\t//this.buttons[i].color.fromRGB(this.values[i].r * 255, this.values[i].g * 255, this.values[i].b * 255);\r\n\t\t\t\tthis.buttons[i].color.set({\r\n\t\t\t\t\tr : this.values[i].r * 255, \r\n\t\t\t\t\tg : this.values[i].g * 255, \r\n\t\t\t\t\tb : this.values[i].b * 255\r\n\t\t\t\t});\r\n\t\t\t\tthis.buttons[i].style.left = buttonPosition + \"px\";\r\n\r\n\t\t\t\tcolorPercentage += colorStep;\r\n\t\t\t\tbuttonPosition += buttonSpacing;\r\n\t\t\t}\r\n\r\n\t\t\tcontext.fillStyle = gradient;\r\n\t\t\tcontext.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set onChange callback that receives (value, index) as arguments.\r\n\t\t *\r\n\t\t * @method setOnChange\r\n\t\t * @param {Function} onChange OnChange callback receives value and index as arguments.\r\n\t\t */\r\n\t\tsetOnChange : function(onChange)\t{\r\n\t\t\tthis.onChange = onChange;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set an array of color values to be displayed on this gradient.\r\n\t\t *\r\n\t\t * @method setValue\r\n\t\t * @param {Array} values\r\n\t\t */\r\n\t\tsetValue : function(values)\t{\r\n\t\t\tthis.values = [];\r\n\r\n\t\t\tfor(var i = 0; i < values.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar color = new Color();\r\n\t\t\t\tcolor.copy(values[i]);\r\n\t\t\t\tthis.values.push(color);\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateButtons();\r\n\t\t\tthis.updateValues();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get the values stored in this element.\r\n\t\t *\r\n\t\t * @method getValue\r\n\t\t * @return {Array} Values of the gradient.\r\n\t\t */\r\n\t\tgetValue : function()\t{\r\n\t\t\treturn this.values;\r\n\t\t},\r\n\r\n\t\tupdateSize : function()\t{\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t\t\r\n\t\t\tthis.canvas.width = this.size.x;\r\n\t\t\tthis.canvas.height = this.size.y;\r\n\r\n\t\t\tthis.updateValues();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn styles.ColorGradientChooser = ColorGradientChooser;\r\n});\r\n\ndefine('skylark-widgets-styles/main',[\r\n\t\"./styles\",\r\n\t\"./ColorChooser\",\r\n\t\"./ColorGradientChooser\"\r\n],function(styles){\r\n\treturn styles;\r\n});\ndefine('skylark-widgets-styles', ['skylark-widgets-styles/main'], function (main) { return main; });\n\n"]}